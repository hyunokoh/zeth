#!/usr/bin/env python3

# Copyright (c) 2021-2021 Zkrypto Inc.
#
# SPDX-License-Identifier: LGPL-3.0+

from __future__ import annotations

from zeth.core.utils import hex_extend_32bytes, digest_to_binary_string, \
    encode_abi

from Crypto import Random
from hashlib import blake2s
from typing import NewType


# Secret key for proving audit
AuditSecretKey = NewType('AuditSecretKey', bytes)


# Public key for proving owenership
AuditPublicKey = NewType('AuditPublicKey', bytes)


class AuditKeyPair:
    """
    Key-pair for audit proof. This represents the 'payment key' (apk)
    from the 'payment address' and the 'spending key' (ask) from the
    'private address'. These are components of ZethAddress, used in
    note commitments in the joinsplit statement.
    """
    def __init__(self, a_sk: AuditSecretKey, a_pk: AuditPublicKey):
        self.a_sk: AuditSecretKey = a_sk
        self.a_pk: AuditPublicKey = a_pk


def audit_key_as_hex(a_sk: bytes) -> str:
    """
    Convert either a secret or public audit key to hex representation of the
    underlying 32-byte object.
    """
    return hex_extend_32bytes(a_sk.hex())


def audit_public_key_from_hex(key_hex: str) -> AuditPublicKey:
    """
    Read an audit public key from a hex string.
    """
    return AuditPublicKey(bytes.fromhex(key_hex))


def audit_secret_key_from_hex(key_hex: str) -> AuditSecretKey:
    """
    Read an audit public key from a hex string.
    """
    return AuditSecretKey(bytes.fromhex(key_hex))


def gen_audit_keypair() -> AuditKeyPair:
    a_sk = AuditSecretKey(Random.get_random_bytes(32))
    a_pk = _derive_a_pk(a_sk)
    keypair = AuditKeyPair(a_sk, a_pk)
    return keypair


def _derive_a_pk(a_sk: AuditSecretKey) -> AuditPublicKey:
    """
    Returns a_pk = blake2s(1100 || [a_sk]_252 || 0^256)
    """
    binary_a_sk = digest_to_binary_string(a_sk)
    first_252bits_ask = binary_a_sk[:252]
    left_leg_bin = "1100" + first_252bits_ask
    left_leg_hex = "{0:0>4X}".format(int(left_leg_bin, 2))
    zeroes = "0000000000000000000000000000000000000000000000000000000000000000"
    a_pk = blake2s(
        encode_abi(
            ["bytes32", "bytes32"],
            [bytes.fromhex(left_leg_hex), bytes.fromhex(zeroes)])
    ).digest()
    return AuditPublicKey(a_pk)
